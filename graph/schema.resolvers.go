package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/Raxaroks/students-app/graph/model"
	"github.com/Raxaroks/students-app/internal/database"
	stringhelpers "github.com/Raxaroks/students-app/pkg/string_helpers"
	"github.com/jackc/pgx/v5"
)

func (r *mutationResolver) CreateStudent(ctx context.Context, input model.NewStudent) (*model.Student, error) {
	uuid := stringhelpers.GenerateUUID()
	newStudent := &model.Student{
		ID:        uuid,
		Firstname: input.Firstname,
		Lastname:  input.Lastname,
		Degree:    input.Degree,
		Course:    input.Course,
		StartedOn: input.StartedOn,
	}

	dbPool := database.EnableConnPool()
	query := "insert into \"school-db\".students\n(firstname, lastname, id, started_on, \"degree\", course)\nvalues(@firstname, @lastname, @id, @started_on, @degree, @course) returning id;"
	args := pgx.NamedArgs{
		"firstname":  newStudent.Firstname,
		"lastname":   newStudent.Lastname,
		"id":         newStudent.ID,
		"started_on": newStudent.StartedOn,
		"degree":     newStudent.Degree,
		"course":     newStudent.Course,
	}

	row := dbPool.QueryRow(context.Background(), query, args)
	if err := row.Scan(&newStudent.ID); err != nil {
		return nil, err
	}

	return newStudent, nil
}

func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	r.students = nil

	dbPool := database.EnableConnPool()
	query := "select\n\ts.id,\n\ts.firstname,\n\ts.lastname,\n\ts.started_on, \n\td.name as degree,\n\tc.name as course\nfrom\n\t\"school-db\".students s\ninner join \"school-db\".degrees d \n\ton\n\ts.degree = d.id\ninner join \"school-db\".courses c \n\ton\n\ts.course = c.id;"
	rows, err := dbPool.Query(context.Background(), query)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var stu model.Student
		if err := rows.Scan(&stu.ID, &stu.Firstname, &stu.Lastname, &stu.StartedOn, &stu.Degree, &stu.Course); err != nil {
			return r.students, err
		}

		r.students = append(r.students, &stu)
	}

	if err := rows.Err(); err != nil {
		return r.students, err
	}

	return r.students, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
